import { readFileSync } from 'fs';
import { log } from '../logger/index.js';
import { loadConfig } from '../config/loader.js';
import { RunManager } from './run-manager.js';
import { Coordinator } from '../l2/coordinator.js';
import type { Task } from '../types/task.js';

export interface OrchestrateOptions {
  runId: string;
  planOnly: boolean;
  dryRun: boolean;
  maxDepth: number;
  retries?: number;
  concurrency: number;
  outPath: string;
  configPath: string;
}

export async function orchestrate(intent: string, options: OrchestrateOptions): Promise<void> {
  log('info', 'L1 Orchestrator started', { intent, options }, 'L1');

  // Load configuration
  const config = loadConfig(options.configPath);
  log('info', 'Configuration loaded', { config_path: options.configPath }, 'L1');

  // Create run directory
  const runManager = new RunManager(options.outPath);
  const runDir = runManager.createRunDirectory(options.runId);

  console.log(`üìÇ Run directory: ${runDir.paths.root}`);
  console.log('');

  // Save config snapshot
  const configSnapshot = readFileSync(options.configPath, 'utf-8');
  runManager.saveConfig(runDir, configSnapshot);

  // Create plan via L2 Coordinator
  log('info', 'Calling L2 Coordinator', undefined, 'L1');
  console.log('ü§ñ L2 Coordinator: Generating plan...');

  const coordinator = new Coordinator(config);
  const plan = await coordinator.createPlan(intent, config.whitelist_tools);

  log('info', 'Plan generated', { task_count: plan.length }, 'L1');
  console.log(`‚úì Plan generated (${plan.length} tasks)`);
  console.log('');

  // Save plan
  runManager.savePlan(runDir, plan);

  if (options.planOnly) {
    console.log('üìã Plan:');
    console.log('');
    displayPlan(plan);
    console.log('');
    console.log(`üíæ Plan saved to: ${runDir.paths.plan}`);
    console.log('');
    console.log('‚ÑπÔ∏è  Plan-only mode: Skipping execution');
    return;
  }

  // TODO: Execute tasks via L3 workers
  console.log('‚ö†Ô∏è  Task execution not yet implemented');
  console.log('üí° L3 Worker will be implemented in Day 8-9');
  console.log('');

  // Generate stub report
  const report = generateStubReport(intent, plan, runDir.paths.root);
  runManager.saveReport(runDir, report);

  console.log(`üìä Report saved to: ${runDir.paths.report}`);
  console.log('');
  console.log('‚úÖ Orchestration completed (stub mode)');
}

function displayPlan(plan: Task[]): void {
  plan.forEach((task, index) => {
    console.log(`${index + 1}. [${task.task_id}] ${task.intent}`);
    console.log(`   Tools: ${task.tools.join(', ')}`);
    console.log(`   State: ${task.state}`);
    if (task.parent_id) {
      console.log(`   Depends on: ${task.parent_id}`);
    }
    console.log('');
  });
}

function generateStubReport(intent: string, plan: Task[], runDir: string): string {
  return `# Orchestra Run Report

**Run Directory**: \`${runDir}\`
**Task**: ${intent}
**Status**: Plan generated (execution not implemented)

---

## üìã Plan Summary

- **Total tasks**: ${plan.length}
- **Tasks planned**: ${plan.filter((t) => t.state === 'planned').length}

---

## üóÇÔ∏è Tasks

${plan
  .map(
    (task, index) => `### Task ${index + 1}: ${task.intent}

- **ID**: \`${task.task_id}\`
- **Tools**: ${task.tools.join(', ')}
- **State**: ${task.state}
${task.parent_id ? `- **Depends on**: \`${task.parent_id}\`` : ''}
`
  )
  .join('\n')}

---

## üìä Status

‚ö†Ô∏è  **Execution not yet implemented**

This is a stub report generated during Day 3-4 development.
L3 Worker execution will be implemented in Day 8-9.

---

*Generated by Orchestra CLI v0.1.0*
`;
}
